module.exports = [
  {
    id: 401,
    pregunta: "¿Sabías que cada navegador tiene su propio motor?",
    opciones: ["El motor de Chrome es V8.", "El motor de Firefox es SipderMonkey.", "El motor de Safari es JSCore.", "El motor de Explorer es Chakra."],
    respuestaCorrecta: "El motor de Chrome es V8.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "01 Node JS",
  },
  {
    id: 402,
    pregunta: "¿Qué es Node.js?",
    opciones: ["Un navegador web.", "Un entorno de ejecución de JavaScript.", "Una biblioteca de JavaScript.", "Un motor de búsqueda."],
    respuestaCorrecta: "Un entorno de ejecución de JavaScript.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "01 Node JS",
  },
  {
    id: 403,
    pregunta: "¿Qué tecnologías subyacentes son utilizadas en Node.js?",
    opciones: ["Lenguaje Python y librería C++.", "Lenguaje Ruby y librería Java.", "Lenguaje JavaScript y librería C.", "Lenguaje C++ y librería libuv."],
    respuestaCorrecta: "Lenguaje C++ y librería libuv.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "01 Node JS",
  },
  {
    id: 404,
    pregunta: "¿Qué es un módulo en el contexto de la programación?",
    opciones: [
      "Un conjunto de funciones JavaScript.",
      "Un archivo de código que encapsula funcionalidad reutilizable.",
      "Una biblioteca de plugins para un framework.",
      "Un contenedor de estilos CSS y scripts JS.",
    ],
    respuestaCorrecta: "Un archivo de código que encapsula funcionalidad reutilizable.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "03 Módulos",
  },
  {
    id: 405,
    pregunta: "¿Qué analogía se utiliza para describir los módulos en el contexto de la programación?",
    opciones: [
      "Un conjunto de herramientas en una caja de herramientas.",
      "Un conjunto de piezas que componen un automóvil.",
      "Un conjunto de recetas en un libro de cocina.",
      "Un conjunto de páginas en un libro.",
    ],
    respuestaCorrecta: "Un conjunto de piezas que componen un automóvil.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "03 Módulos",
  },
  {
    id: 406,
    pregunta: "¿Qué permite el sistema de módulos de Node en términos de exportación e importación de código entre archivos?",
    opciones: [
      "Exportar e importar variables y funciones entre archivos.",
      "Importar solo variables entre archivos.",
      "Exportar solo funciones entre archivos.",
      "Importar solo funciones entre archivos.",
    ],
    respuestaCorrecta: "Exportar e importar variables y funciones entre archivos.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "03 Módulos",
  },
  {
    id: 407,
    pregunta: "¿Qué objeto se utiliza para exportar código desde un módulo en Node?",
    opciones: ["module.exports", "modules.exports", "exports.module", "exports.modules"],
    respuestaCorrecta: "module.exports",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "03 Módulos",
  },
  {
    id: 408,
    pregunta: "¿Cuál es la forma correcta de importar un módulo en Node?",
    opciones: [
      "const modulo = require('./ruta-del-archivo');",
      "const modulo = require('ruta-del-archivo.js');",
      "const modulo = requires('./ruta-del-archivo');",
      "const modulos = Requires('./ruta-del-archivo');",
    ],
    respuestaCorrecta: "const modulo = require('./ruta-del-archivo');",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "03 Módulos",
  },
  {
    id: 409,
    pregunta: "¿Qué significa la sigla NPM en el contexto de Node.js?",
    opciones: ["Node Package Modules", "Node Project Management", "Node Package Manager", "Node Project Modules"],
    respuestaCorrecta: "Node Package Manager",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 410,
    pregunta: "¿Cuál es el papel principal de NPM en el ecosistema de Node.js?",
    opciones: [
      "Gestionar y descargar paquetes de software",
      "Proporcionar un entorno de desarrollo para proyectos Node.js",
      "Ejecutar código JavaScript en el servidor",
      "Crear y mantener servidores web",
    ],
    respuestaCorrecta: "Gestionar y descargar paquetes de software",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 411,
    pregunta: "¿Qué es un paquete en el contexto de Node.js y por qué NPM lo gestiona?",
    opciones: [
      "Un conjunto de módulos de código que se pueden descargar e instalar en un proyecto",
      "Una herramienta para ejecutar código JavaScript en el servidor",
      "Un entorno de desarrollo para proyectos Node.js",
      "Un servicio para crear y mantener servidores web",
    ],
    respuestaCorrecta: "Un conjunto de módulos de código que se pueden descargar e instalar en un proyecto",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 412,
    pregunta: "¿qué hacía el comando 'npm install'?",
    opciones: [
      "Descargaba e instalaba todos los paquetes detallados en un archivo llamado package.json",
      "Compilaba el código JavaScript para ser ejecutado en el navegador",
      "Generaba automáticamente la documentación del proyecto",
      "Eliminaba todos los archivos temporales del proyecto",
    ],
    respuestaCorrecta: "Descargaba e instalaba todos los paquetes detallados en un archivo llamado package.json",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 413,
    pregunta: "¿Cómo llamamos a los módulos externos utilizados dentro de nuestra aplicación?",
    opciones: ["Dependencias", "Extensiones", "Módulos externos", "Plugins"],
    respuestaCorrecta: "Dependencias",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 414,
    pregunta: "¿Qué función cumple el paquete 'nodemon' en el desarrollo de aplicaciones con Node.js?",
    opciones: [
      "Permite realizar cambios en el código y aplicarlos automáticamente sin reiniciar el proyecto",
      "Optimiza el rendimiento del código JavaScript",
      "Permite ejecutar múltiples instancias de Node.js en un mismo servidor",
      "Proporciona funciones de seguridad para proteger el código fuente",
    ],
    respuestaCorrecta: "Permite realizar cambios en el código y aplicarlos automáticamente sin reiniciar el proyecto",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "04 NPM",
  },
  {
    id: 415,
    pregunta: "¿Qué función cumple la versión de un paquete en NPM?",
    opciones: [
      "Indica la fecha de publicación del paquete",
      "Determina la compatibilidad del paquete con otras dependencias",
      "Define la cantidad de funcionalidades que tiene el paquete",
      "Permite identificar cambios, actualizaciones y mejoras en el código del paquete",
    ],
    respuestaCorrecta: "Permite identificar cambios, actualizaciones y mejoras en el código del paquete",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "05 Versionado",
  },
  {
    id: 416,
    pregunta: "¿Cuál es el propósito principal del archivo package.json en Node.js?",
    opciones: [
      "Definir el aspecto visual de la aplicación",
      "Gestionar las dependencias del proyecto y especificar sus versiones",
      "Controlar el flujo de ejecución del programa",
      "Almacenar los registros de errores y excepciones",
    ],
    respuestaCorrecta: "Gestionar las dependencias del proyecto y especificar sus versiones",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "05 Versionado",
  },
  {
    id: 417,
    pregunta: "¿Cuál de las siguientes opciones describe correctamente el formato de versionado SemVer (Semantic Versioning)?",
    opciones: [
      "MAJOR.MINOR.PATCH, donde PATCH se incrementa para cambios que añaden nuevas funcionalidades, MINOR para cambios compatibles con versiones anteriores y MAJOR para cambios que rompen la compatibilidad",
      "PATCH.MINOR.MAJOR, donde MAJOR se incrementa para cambios que añaden nuevas funcionalidades, MINOR para cambios compatibles con versiones anteriores y PATCH para cambios que rompen la compatibilidad",
      "MINOR.MAJOR.PATCH, donde PATCH se incrementa para cambios que añaden nuevas funcionalidades, MINOR para cambios compatibles con versiones anteriores y MAJOR para cambios que rompen la compatibilidad",
      "MAJOR.PATCH.MINOR, donde MAJOR se incrementa para cambios que añaden nuevas funcionalidades, PATCH para cambios compatibles con versiones anteriores y MINOR para cambios que rompen la compatibilidad",
    ],
    respuestaCorrecta:
      "MAJOR.MINOR.PATCH, donde PATCH se incrementa para cambios que añaden nuevas funcionalidades, MINOR para cambios compatibles con versiones anteriores y MAJOR para cambios que rompen la compatibilidad",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "05 Versionado",
  },
  {
    id: 418,
    pregunta: "¿Qué indica la notación '^' y '~' en las versiones de las dependencias en el archivo package.json?",
    opciones: [
      "La notación '^' indica que el proyecto depende de una versión específica de la dependencia, mientras que '~' indica que el proyecto depende de una versión que puede ser más reciente pero debe ser compatible con la versión especificada.",
      "La notación '^' indica que el proyecto depende de una versión que puede ser más reciente pero debe ser compatible con la versión especificada, mientras que '~' indica que el proyecto depende de una versión específica de la dependencia.",
      "La notación '^' indica que el proyecto depende de una versión mayor de la dependencia especificada, mientras que '~' indica que el proyecto depende de una versión menor o igual a la especificada.",
      "La notación '^' indica que el proyecto depende de una versión menor o igual a la especificada, mientras que '~' indica que el proyecto depende de una versión mayor de la dependencia especificada.",
    ],
    respuestaCorrecta:
      "La notación '^' indica que el proyecto depende de una versión que puede ser más reciente pero debe ser compatible con la versión especificada, mientras que '~' indica que el proyecto depende de una versión específica de la dependencia.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "05 Versionado",
  },
  {
    id: 419,
    pregunta: "¿Cuál es la importancia del manejo de versiones en Node.js?",
    opciones: [
      "El manejo de versiones en Node.js ayuda a prevenir problemas de compatibilidad y a garantizar que todos los desarrolladores que trabajan en un proyecto compartan las mismas versiones de las dependencias.",
      "El manejo de versiones en Node.js facilita la introducción de errores en un proyecto y permite a los desarrolladores utilizar versiones diferentes de las dependencias sin problemas.",
      "El manejo de versiones en Node.js no es importante ya que las dependencias siempre serán compatibles con cualquier versión de Node.js.",
      "El manejo de versiones en Node.js es únicamente importante para proyectos grandes y complejos.",
    ],
    respuestaCorrecta:
      "El manejo de versiones en Node.js ayuda a prevenir problemas de compatibilidad y a garantizar que todos los desarrolladores que trabajan en un proyecto compartan las mismas versiones de las dependencias.",
    categoria: "Módulo 2: L4 Node JS",
    seccion: "05 Versionado",
  },
  {
    id: 420,
    pregunta: "¿Por qué es importante la calidad del código en el desarrollo de software?",
    opciones: [
      "La calidad del código es una inversión a mediano y largo plazo ya que nos permitirá tener un código escalable y fácil de manipular.",
      "La calidad del código no es importante ya que siempre se puede refactorizar más adelante.",
      "La calidad del código solo es importante para los desarrolladores senior.",
      "La calidad del código es importante solo en proyectos pequeños y simples.",
    ],
    respuestaCorrecta: "La calidad del código es una inversión a mediano y largo plazo ya que nos permitirá tener un código escalable y fácil de manipular.",
    categoria: "General",
    seccion: "Desarrollo de software",
  },
];

// "categoria": "Módulo 2: L4 Node JS",
// id: 414,
// "seccion": "06 ¡Mejora la calidad de tu código!"
